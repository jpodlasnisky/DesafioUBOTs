// Code generated by go-swagger; DO NOT EDIT.

package vinho

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"std/github.com/jpodlasnisky/DesafioUBOTs/models"
)

// RecomendacaoVinhoHandlerFunc turns a function with the right signature into a recomendacao vinho handler
type RecomendacaoVinhoHandlerFunc func(RecomendacaoVinhoParams, *models.Token) middleware.Responder

// Handle executing the request and returning a response
func (fn RecomendacaoVinhoHandlerFunc) Handle(params RecomendacaoVinhoParams, principal *models.Token) middleware.Responder {
	return fn(params, principal)
}

// RecomendacaoVinhoHandler interface for that can handle valid recomendacao vinho params
type RecomendacaoVinhoHandler interface {
	Handle(RecomendacaoVinhoParams, *models.Token) middleware.Responder
}

// NewRecomendacaoVinho creates a new http.Handler for the recomendacao vinho operation
func NewRecomendacaoVinho(ctx *middleware.Context, handler RecomendacaoVinhoHandler) *RecomendacaoVinho {
	return &RecomendacaoVinho{Context: ctx, Handler: handler}
}

/*RecomendacaoVinho swagger:route GET /recomendacaoVinho/{cpfCliente} vinho recomendacaoVinho

Recomenda um vinho com base no hist√≥rico de compras de um determinado cliente

*/
type RecomendacaoVinho struct {
	Context *middleware.Context
	Handler RecomendacaoVinhoHandler
}

func (o *RecomendacaoVinho) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRecomendacaoVinhoParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Token
	if uprinc != nil {
		principal = uprinc.(*models.Token) // this is really a models.Token, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
