// Code generated by go-swagger; DO NOT EDIT.

package cliente

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"std/github.com/jpodlasnisky/DesafioUBOTs/models"
)

// ClientesGastoTotalHandlerFunc turns a function with the right signature into a clientes gasto total handler
type ClientesGastoTotalHandlerFunc func(ClientesGastoTotalParams, *models.Token) middleware.Responder

// Handle executing the request and returning a response
func (fn ClientesGastoTotalHandlerFunc) Handle(params ClientesGastoTotalParams, principal *models.Token) middleware.Responder {
	return fn(params, principal)
}

// ClientesGastoTotalHandler interface for that can handle valid clientes gasto total params
type ClientesGastoTotalHandler interface {
	Handle(ClientesGastoTotalParams, *models.Token) middleware.Responder
}

// NewClientesGastoTotal creates a new http.Handler for the clientes gasto total operation
func NewClientesGastoTotal(ctx *middleware.Context, handler ClientesGastoTotalHandler) *ClientesGastoTotal {
	return &ClientesGastoTotal{Context: ctx, Handler: handler}
}

/*ClientesGastoTotal swagger:route GET /clientesGastoTotal cliente clientesGastoTotal

Retorna os clientes ordenados de forma decrescente com base no total de compras realizado

*/
type ClientesGastoTotal struct {
	Context *middleware.Context
	Handler ClientesGastoTotalHandler
}

func (o *ClientesGastoTotal) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewClientesGastoTotalParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Token
	if uprinc != nil {
		principal = uprinc.(*models.Token) // this is really a models.Token, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
