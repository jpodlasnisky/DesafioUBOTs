// Code generated by go-swagger; DO NOT EDIT.

package cliente

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"std/github.com/jpodlasnisky/DesafioUBOTs/models"
)

// ClientesMaisFieisHandlerFunc turns a function with the right signature into a clientes mais fieis handler
type ClientesMaisFieisHandlerFunc func(ClientesMaisFieisParams, *models.Token) middleware.Responder

// Handle executing the request and returning a response
func (fn ClientesMaisFieisHandlerFunc) Handle(params ClientesMaisFieisParams, principal *models.Token) middleware.Responder {
	return fn(params, principal)
}

// ClientesMaisFieisHandler interface for that can handle valid clientes mais fieis params
type ClientesMaisFieisHandler interface {
	Handle(ClientesMaisFieisParams, *models.Token) middleware.Responder
}

// NewClientesMaisFieis creates a new http.Handler for the clientes mais fieis operation
func NewClientesMaisFieis(ctx *middleware.Context, handler ClientesMaisFieisHandler) *ClientesMaisFieis {
	return &ClientesMaisFieis{Context: ctx, Handler: handler}
}

/*ClientesMaisFieis swagger:route GET /clientesMaisFieis/{tamanhoLista} cliente clientesMaisFieis

Retorna os clientes com maior n√∫mero de compras

*/
type ClientesMaisFieis struct {
	Context *middleware.Context
	Handler ClientesMaisFieisHandler
}

func (o *ClientesMaisFieis) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewClientesMaisFieisParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Token
	if uprinc != nil {
		principal = uprinc.(*models.Token) // this is really a models.Token, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
