// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VinhoRecomendado Recomendação de vinho para um cliente determinado
//
// swagger:model VinhoRecomendado
type VinhoRecomendado struct {

	// Categoria do Vinho
	// Min Length: 1
	Categoria string `json:"categoria,omitempty"`

	// País de origem do vinho
	// Min Length: 1
	Pais string `json:"pais,omitempty"`

	// Preço do Vinho
	Preco float64 `json:"preco,omitempty"`

	// Nome do Produto
	// Min Length: 1
	Produto string `json:"produto,omitempty"`

	// Ano da Safra do Vinho
	Safra int64 `json:"safra,omitempty"`

	// Variedade do Vinho
	// Min Length: 1
	Variedade string `json:"variedade,omitempty"`
}

// Validate validates this vinho recomendado
func (m *VinhoRecomendado) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePais(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariedade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VinhoRecomendado) validateCategoria(formats strfmt.Registry) error {

	if swag.IsZero(m.Categoria) { // not required
		return nil
	}

	if err := validate.MinLength("categoria", "body", string(m.Categoria), 1); err != nil {
		return err
	}

	return nil
}

func (m *VinhoRecomendado) validatePais(formats strfmt.Registry) error {

	if swag.IsZero(m.Pais) { // not required
		return nil
	}

	if err := validate.MinLength("pais", "body", string(m.Pais), 1); err != nil {
		return err
	}

	return nil
}

func (m *VinhoRecomendado) validateProduto(formats strfmt.Registry) error {

	if swag.IsZero(m.Produto) { // not required
		return nil
	}

	if err := validate.MinLength("produto", "body", string(m.Produto), 1); err != nil {
		return err
	}

	return nil
}

func (m *VinhoRecomendado) validateVariedade(formats strfmt.Registry) error {

	if swag.IsZero(m.Variedade) { // not required
		return nil
	}

	if err := validate.MinLength("variedade", "body", string(m.Variedade), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VinhoRecomendado) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VinhoRecomendado) UnmarshalBinary(b []byte) error {
	var res VinhoRecomendado
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
